{"version":3,"sources":["components/AddTodo.jsx","components/Todo.jsx","components/Todos.jsx","components/List.jsx","components/All.jsx","serviceWorker.js","index.js"],"names":["AddTodo","props","onSubmit","submit","type","placeholder","className","value","item","onChange","addTask","required","Todo","textStyle","textDecoration","todo","complete","color","id","onClick","check","for","style","title","delete","Todos","map","x","key","List","state","newItem","e","newState","index","findIndex","setState","filter","target","preventDefault","addToList","trims","alert","Date","now","replace","reset","this","Component","All","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAoBeA,G,KAjBC,SAAAC,GACd,OACE,6BACE,0BAAMC,SAAUD,EAAME,QACpB,2BACEC,KAAK,OACLC,YAAY,0CACZC,UAAU,QACVC,MAAON,EAAMO,KACbC,SAAUR,EAAMS,QAChBC,UAAQ,IAEV,2BAAOP,KAAK,SAASG,MAAM,IAAID,UAAU,YCYlCM,EAxBF,SAAAX,GACX,IAAMY,EAAY,CAChBC,eAAgBb,EAAMc,KAAKC,UAAY,eACvCC,MAAOhB,EAAMc,KAAKC,UAAY,QAEhC,OACE,yBAAKV,UAAU,OACb,0BAAMA,UAAU,SACd,2BACEF,KAAK,WACLc,GAAIjB,EAAMc,KAAKG,GACfC,QAAS,kBAAMlB,EAAMmB,MAAMnB,EAAMc,KAAKG,OAExC,2BAAOG,IAAKpB,EAAMc,KAAKG,MAEzB,0BAAMZ,UAAU,OAAOgB,MAAOT,GAC3BZ,EAAMc,KAAKQ,OAEd,0BAAMjB,UAAU,OAAOa,QAAS,kBAAMlB,EAAMuB,OAAOvB,EAAMc,KAAKG,MAC5D,uBAAGZ,UAAU,wBCJNmB,EAdD,SAAAxB,GACZ,OACE,6BACGA,EAAMc,KAAKW,KAAI,SAAAC,GAAC,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAET,GACPH,KAAMY,EACNP,MAAO,kBAAMnB,EAAMmB,MAAMO,EAAET,KAC3BM,OAAQ,kBAAMvB,EAAMuB,OAAOG,EAAET,YCmExBW,E,2MAzEbC,MAAQ,CACNf,KAAM,CACJ,CACEG,GAAI,EACJK,MAAO,qBACPP,UAAU,GAEZ,CACEE,GAAI,EACJK,MAAO,eACPP,UAAU,IAGde,QAAS,I,EAEXX,MAAQ,SAAAY,GACN,IAAMC,EAAQ,YAAO,EAAKH,MAAMf,MAC1BmB,EAAQD,EAASE,WAAU,SAAAR,GAAC,OAAIA,EAAET,IAAMc,KAC9CC,EAASC,GAAOlB,UAAYiB,EAASC,GAAOlB,SAC5C,EAAKoB,SAAS,CAAErB,KAAMkB,K,EAExBT,OAAS,SAAAQ,GACP,IACMC,EADQ,YAAO,EAAKH,MAAMf,MACNsB,QAAO,SAAAV,GAAC,OAAIA,EAAET,IAAMc,KAC9C,EAAKI,SAAS,CAAErB,KAAMkB,K,EAExBvB,QAAU,SAAAsB,GACR,EAAKI,SAAS,CAAEL,QAASC,EAAEM,OAAO/B,S,EAEpCJ,OAAS,SAAA6B,GACPA,EAAEO,iBACF,EAAKC,UAAU,EAAKV,MAAMC,SAC1B,EAAKK,SAAS,CAAEL,QAAS,M,EAE3BS,UAAY,SAAAR,GAEV,GAAa,GADC,EAAKS,MAAMT,GAEvBU,MAAM,4CACD,CACL,IAAMX,EAAU,CACdb,GAAIyB,KAAKC,MACTrB,MAAOS,EACPhB,UAAU,GAENiB,EAAQ,sBAAO,EAAKH,MAAMf,MAAlB,CAAwBgB,IACtC,EAAKK,SAAS,CAAErB,KAAMkB,M,EAG1BQ,MAAQ,SAAAT,GACN,OAAOA,EAAEa,QAAQ,OAAQ,K,EAE3BC,MAAQ,WACN,EAAKV,SAAS,CAAErB,KAAM,M,wEAGtB,OACE,yBAAKT,UAAU,WACb,yBAAKA,UAAU,SAAf,iBACA,kBAAC,EAAD,CACES,KAAMgC,KAAKjB,MAAMf,KACjBP,KAAMuC,KAAKjB,MAAMC,QACjBrB,QAASqC,KAAKrC,QACdP,OAAQ4C,KAAK5C,SAEf,kBAAC,EAAD,CAAOY,KAAMgC,KAAKjB,MAAMf,KAAMK,MAAO2B,KAAK3B,MAAOI,OAAQuB,KAAKvB,SAC9D,4BAAQlB,UAAU,QAAQa,QAAS4B,KAAKD,OAAxC,c,GAlEWE,aCMJC,EAPH,WACV,OACE,yBAAK3C,UAAU,SACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4dc98704.chunk.js","sourcesContent":["import React from \"react\";\nimport todo from \"./styles/todo.css\";\n\nconst AddTodo = props => {\n  return (\n    <div>\n      <form onSubmit={props.submit}>\n        <input\n          type=\"text\"\n          placeholder=\"新增待辦事項...\"\n          className=\"input\"\n          value={props.item}\n          onChange={props.addTask}\n          required\n        ></input>\n        <input type=\"submit\" value=\"+\" className=\"btn\"></input>\n      </form>\n    </div>\n  );\n};\nexport default AddTodo;\n","import React from \"react\";\nimport todo from \"./styles/todo.css\";\n\nconst Todo = props => {\n  const textStyle = {\n    textDecoration: props.todo.complete && \"line-through\",\n    color: props.todo.complete && \"grey\"\n  };\n  return (\n    <div className=\"box\">\n      <span className=\"round\">\n        <input\n          type=\"checkbox\"\n          id={props.todo.id}\n          onClick={() => props.check(props.todo.id)}\n        />\n        <label for={props.todo.id}></label>\n      </span>\n      <span className=\"item\" style={textStyle}>\n        {props.todo.title}\n      </span>\n      <span className=\"icon\" onClick={() => props.delete(props.todo.id)}>\n        <i className=\"fas fa-trash-alt\"></i>\n      </span>\n    </div>\n  );\n};\nexport default Todo;\n//<i className=\"fas fa-trash-alt\"></i>\n","import React, { Component } from \"react\";\nimport todo from \"./styles/todo.css\";\nimport Todo from \"./Todo\";\n\nconst Todos = props => {\n  return (\n    <div>\n      {props.todo.map(x => (\n        <Todo\n          key={x.id}\n          todo={x}\n          check={() => props.check(x.id)}\n          delete={() => props.delete(x.id)}\n        />\n      ))}\n    </div>\n  );\n};\nexport default Todos;\n","import React, { Component } from \"react\";\nimport todo from \"./styles/todo.css\";\nimport AddTodo from \"./AddTodo\";\nimport Todos from \"./Todos\";\n\nclass List extends Component {\n  state = {\n    todo: [\n      {\n        id: 1,\n        title: \"做運動\",\n        complete: false\n      },\n      {\n        id: 2,\n        title: \"買菜\",\n        complete: false\n      }\n    ],\n    newItem: \"\"\n  };\n  check = e => {\n    const newState = [...this.state.todo];\n    const index = newState.findIndex(x => x.id == e);\n    newState[index].complete = !newState[index].complete;\n    this.setState({ todo: newState });\n  };\n  delete = e => {\n    const newArray = [...this.state.todo];\n    const newState = newArray.filter(x => x.id != e);\n    this.setState({ todo: newState });\n  };\n  addTask = e => {\n    this.setState({ newItem: e.target.value });\n  };\n  submit = e => {\n    e.preventDefault();\n    this.addToList(this.state.newItem);\n    this.setState({ newItem: \"\" });\n  };\n  addToList = e => {\n    const space = this.trims(e);\n    if (space == 0) {\n      alert(\"不能輸入空白\");\n    } else {\n      const newItem = {\n        id: Date.now(),\n        title: e,\n        complete: false\n      };\n      const newState = [...this.state.todo, newItem];\n      this.setState({ todo: newState });\n    }\n  };\n  trims = e => {\n    return e.replace(/[ ]/g, \"\");\n  };\n  reset = () => {\n    this.setState({ todo: [] });\n  };\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"title\">My To Do List</div>\n        <AddTodo\n          todo={this.state.todo}\n          item={this.state.newItem}\n          addTask={this.addTask}\n          submit={this.submit}\n        />\n        <Todos todo={this.state.todo} check={this.check} delete={this.delete} />\n        <button className=\"rebtn\" onClick={this.reset}>\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React from \"react\";\nimport List from \"./List\";\nimport todo from \"./styles/todo.css\";\n\nconst All = function() {\n  return (\n    <div className=\"allbg\">\n      <List />\n    </div>\n  );\n};\nexport default All;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport All from \"./components/All\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<All />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}